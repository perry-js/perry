<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Perry.js Preview</title>
  <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js"></script>
  <style>
    code {
      white-space: initial;
    }

    .box {
      padding: 1.8em;
      padding-bottom: 0;
      position: relative;
      border: 1px dashed rgba(0, 0, 0, 0.2);
      margin-bottom: 1.8em;
    }

    .box::before {
      top: -1.6em;
      left: 0px;
      font-size: 11px;
      color: rgba(0, 0, 0, 0.5);
      display: block;
      position: absolute;
    }

    .preview::before {
      content: 'PERRY.JS PREVIEW AND CODE';
    }

    .options::before {
      content: 'PERRY.JS OPTIONS';
    }

    .api::before {
      content: 'PERRY.JS API';
    }

    .zero-margin-bottom {
      margin-bottom: 0;
    }

    .actions {
      display: flex;
      justify-content: center;
      flex-direction: column;
      margin: 1em 6em;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row">
      <h1>Perry.js</h1>
      <h5>Perry.js is a Javascript library to help creating meaningful bug reports.</h5>

      <p>Perry is a spy. His job is to help you
        and your mates to fight against bugs.</p>

      <p>
        He does it by spying your user usage. He listens to console logs, warns, errors, and user interaction such as clicks.<br />
        He writes all this data inside your page LocalStorage under its specific namespacing.<br />
        After gathering all this data, it wraps it all together into a serializable Bug Report, which contains:
      </p>

      <ul>
        <li>Logs</li>
        <li>Warnings</li>
        <li>Errors</li>
        <li>MouseEvent Data (clicks, target element, screen position, screen size and so on)</li>
        <li>Cookies Data</li>
        <li>Screen Recording</li>
      </ul>

      <p>
        All components in Perry are lazy loaded by default.<br />
        It means that you load Perry's features on demand as you actually use them.
      </p>

      <p>
        Perry also follows a plugin based approach for sending payloads to external endpoints.
        You are able to provide functions to the <code>plugins</code> option that will process
        the Perry Report Info payload and do whatever they want with them.<br />
        <br />
        We hope that soon enough we have a few plugins for the most different scenarios, so we
        can ease adoption.<br/>
        <i>(Even though, this design might go through a few changes as long as we receive feedback on it.)</i>
      </p>
      <p>Some features are still in the <a href="https://github.com/orgs/perry-js/projects/1">Roadmap</a>, but you might want to take a look on that!</p>
      <p>Below you'll find more details about Perry Client API, Options and also a Code Example of it.</p>
    </div>

    <br />

    <div class="box api">
      <table class="u-full-width">
        <thead>
          <tr>
            <th>Method</th>
            <th>Signature</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>constructor</code></td>
            <td><code>new Perry(options: PerryOptions): Perry</code></td>
            <td>Returns an instance of Perry.</td>
          </tr>
          <tr>
            <td><code>notify</code></td>
            <td><code>perry.notify(error: Error): Promise&lt;void&gt;</code></td>
            <td>A programatic API so you can let perry know of errors without it having to catch them. Useful when handling errors.</td>
          </tr>
          <tr>
            <td><code>render</code></td>
            <td><code>perry.render(): Promise&lt;void&gt;</code></td>
            <td>Fetches the Perry Widget component, appends a <code>#perry-widget</code> element into the document body and renders Perry Widget inside of it.</td>
          </tr>
          <tr>
            <td><code>start</code></td>
            <td><code>perry.start(): Promise&lt;void&gt;</code></td>
            <td>Tries to start the perry watcher. If something goes wrong, it will stop it and throw an error.</td>
          </tr>
          <tr>
            <td><code>stop</code></td>
            <td><code>perry.stop(): Promise&lt;void&gt;</code></td>
            <td>Stops the perry watcher.</td>
          </tr>
          <tr>
            <td><code>submit</code></td>
            <td><code>perry.submit(reportInfo: IPerryReportInfo): Promise&lt;IPerryReport&gt;</code></td>
            <td>Aggregates the whole reporting session into the structure defined in the <code>IPerryReport</code> interface, invokes all plugins giving it as an argument and then returns it. Resolves after executing all the plugins configured.</td>
          </tr>
        </tbody>
      </table>      
    </div>

    <div class="box options">
      <p>These are the available options you can pass to the Perry constructor.</p>
      <table class="u-full-width">
        <thead>
          <tr>
            <th>Option</th>
            <th>Description</th>
            <th>Type</th>
            <th>Default</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>log</code></td>
            <td>Enables <code>console.log()</code> calls to be monitored</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>warn</code></td>
            <td>Enabled <code>console.warn()</code> calls to be monitored</td>
            <td><code>boolean</code></td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td><code>error</code></td>
            <td>Enabled <code>console.error()</code> calls to be monitored</td>
            <td><code>boolean</code></td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td><code>clicks</code></td>
            <td>Enables a listener on <code>document.onclick</code> with screen and viewport information</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>cookies</code></td>
            <td>Returns the customer browser cookies in the final report</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>localStorage (WIP)</code></td>
            <td>Returns <code>localStorage</code> data in the final report</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>sessionStorage (WIP)</code></td>
            <td>Returns <code>sessionStorage</code> data in the final report</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>clearOnReload</code></td>
            <td>Will clear the perry store everytime you reload it's instance</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>clearOnStart</code></td>
            <td>Will clear the perry store everytime you start a bug reporting session</td>
            <td><code>boolean</code></td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td><code>ignoreScriptErrors</code></td>
            <td>Ignore's external script error messages.</td>
            <td><code>boolean</code></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td><code>enableScreenRecording</code></td>
            <td>Enables Screen Recording through the MediaDevices and MediaRecorder API's.</td>
            <td><code>boolean</code></td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td><code>plugins</code></td>
            <td>Allows you to inject handlers for the reports generated by Perry. (e.g.: You can send data to your API using it).</td>
            <td><code>ReadonlyArray&lt;(reportInfo: PerryReportInfo) => void&gt;</code></td>
            <td><code>[]</code></td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="box preview">
      <p>
        Perry is already taking care of this page you're reading right now.<br />
        To render the Perry Widget, you can click in the button below.<br />
        You can also play with <code>perry.start()</code>, <code>perry.stop()</code> and <code>perry.submit()</code> in the DevTools console.<br /><br/>
        This page has a ConsoleLogPlugin implemented for Perry.<br /><br />
        Open DevTools, start recording, play around, submit the form, and see your console.
      </p>

      <div class="row">
        <button id="action-render-widget" class="button-primary">Render Perry Widget</button>
      </div>

      <br />

      <button id="action-log">Console: <span style="color: #449;">Log</span></button>
      <button id="action-warn">Console: <span style="color: #f80">Warn</span></button>
      <button id="action-error">Console: <span style="color: #f00">Error</span></button>
      <button id="action-throw-handled-exception"><span style="color: #f00">Throw Handled Exception</span></button>
      <button id="action-throw-unhandled-exception"><span style="color: #f00">Throw Unhandled Exception</span></button>

      <pre class="zero-margin-bottom">
        <code class="html">
&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  /* This is an example plugin for handling perry's report */
  function ConsoleLogPlugin(reportInfo) {
    console.log(&quot;[Perry Report Info]:&quot;, reportInfo);
    console.log(&quot;[Perry Report Info]:&quot;, [
      &quot;&quot;,
      &quot;This was printed by the ConsoleLogPlugin.&quot;,
      &quot;It is implemented inline into this test page.&quot;,
      &quot;To know more about how to implement a Perry Plugin:&quot;,
      &quot;Checkout this page src code or the github repository.&quot;
    ].join(&quot;\n&quot;));

    alert([
      &quot;[Perry Report Info]: Please check your console logs to see the recording report.&quot;,
      &quot;Sorry for the alert as well, we'll get rid of it soon! &lt;3&quot;
    ].join(&quot;\n&quot;));
  }

  /* Initialize Perry.js */
  const perry = new Perry({
    /* Enables log recording */
    log: true,
    /* Enables click recording */
    clicks: true,
    /* Enables screen recording */
    enableScreenRecording: true,
    /* Plugins are ways to handle the bug reporting submission */
    plugins: [
      ConsoleLogPlugin,
    ]
  });

  /* Attachs listeners to this page code */
  document.getElementById(&quot;action-render-widget&quot;).addEventListener(&quot;click&quot;, () =&gt; perry.render());
  document.getElementById(&quot;action-log&quot;).addEventListener(&quot;click&quot;, () =&gt; console.log('ama simple info log'));
  document.getElementById(&quot;action-warn&quot;).addEventListener(&quot;click&quot;, () =&gt; console.warn('ama warning'));
  document.getElementById(&quot;action-error&quot;).addEventListener(&quot;click&quot;, () =&gt; console.error('ama error'));
  document.getElementById(&quot;action-throw-unhandled-exception&quot;).addEventListener(&quot;click&quot;, () =&gt; { throw new Error('ama boom') });
  document.getElementById(&quot;action-throw-handled-exception&quot;).addEventListener(&quot;click&quot;, () =&gt; {
    try {
      throw new Error('ama boom');
    } catch (e) {
      perry.notify(e);
    }
  })
&lt;/script&gt;
        </code>
      </pre>
    </div>
  </div>

  <script>hljs.initHighlightingOnLoad();</script>
  
  <script src="/bundle.js"></script>

  <script>
    /* This is an example plugin for handling perry's report */
    function ConsoleLogPlugin(reportInfo) {
      console.log("[Perry Report Info]:", reportInfo);
      console.log("[Perry Report Info]:", [
        "",
        "This was printed by the ConsoleLogPlugin.",
        "It is implemented inline into this test page.",
        "To know more about how to implement a Perry Plugin:",
        "Checkout this page src code or the github repository."
      ].join("\n"));

      alert([
        "[Perry Report Info]: Please check your console logs to see the recording report.",
        "Sorry for the alert as well, we'll get rid of it soon! <3"
      ].join("\n"));
    }

    /* Initialize Perry.js */
    const perry = new Perry({
      /* Enables log recording */
      log: true,
      /* Enables click recording */
      clicks: true,
      /* Enables screen recording */
      enableScreenRecording: true,
      /* Plugins are ways to handle the bug reporting submission */
      plugins: [
        ConsoleLogPlugin,
      ]
    });

    /* Attachs listeners to this page code */
    document.getElementById("action-log").addEventListener("click", () => console.log('ama simple info log'));
    document.getElementById("action-warn").addEventListener("click", () => console.warn('ama warning'));
    document.getElementById("action-error").addEventListener("click", () => console.error('ama error'));
    document.getElementById("action-throw-unhandled-exception").addEventListener("click", () => { throw new Error('ama boom') });
    document.getElementById("action-throw-handled-exception").addEventListener("click", () => {
      try {
        throw new Error('ama boom');
      } catch (e) {
        perry.notify(e);
      }
    });

    const renderWidgetButton = document.getElementById("action-render-widget");

    renderWidgetButton.addEventListener("click", () => {
      const initialState = renderWidgetButton.innerText;
      renderWidgetButton.innerText = "Loading widget..";

      perry.render()
        .then(() => {
          renderWidgetButton.innerText = "Widget is rendered";
          renderWidgetButton.setAttribute("disabled", "true");
        })
        .catch((e) => {
          renderWidgetButton.innerText = initialState;
          console.error(e);
        });
    });
  </script>
</body>

</html>
